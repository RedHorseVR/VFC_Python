;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : TabsPythonParser.pl.vfc
;  File Date : 12:47:11 AM - 27:Apr:2023


input(#use);//////
set();//
generic(use File::stat qw(stat););//
end();//

input(sub LoadFileAsString {);//
output(local ( $file ) = @_;);//
output(local ( $keyfile ) ;);//
set(  open( FILE, $file ););//
loop(  while(<FILE>) {);//
set(s/^ *\n//;);//
set(tr/\t/ /;);//
set(  $keyfile = "$keyfile$_";);//
lend(  });//# End of SEARCHFILE
generic(  close ( FILE ););//
end($keyfile; });//

input(# main);// 
process($cmd_line = $ENV{'QUERY_STRING'} ;);//GetParams();
output();//print( "ARG = $cmd_line  \n" );
process(  ($cmd_line) = @ARGV;);//$cmd_line = $ENV{'QUERY_STRING'} ;
output();//print( "ARG = $cmd_line  \n" );
process($outputVFC =  "$cmd_line.vfc" ;);//$cmd_line = $ENV{'QUERY_STRING'} ;
set($file = $cmd_line ;);//
output(print( STDOUT  "parse file =  $cmd_line  ...  \n" ););//
generic($lasttime = 0;);//$lasttime = stat($file)->mtime;
set($I = 2;);//$I = 0;
process(Parse(););//
loop(while( $I < 1 ) {);//
set($I = $I+1;);//
generic($nowtime = stat($file)->mtime;);// // seconds since the epoch //
output();//print(  $nowtime - $lasttime );
output();//print( "  --- $file\n" );
branch(if ( $nowtime != $lasttime ));//
path( {);//
process(Parse(););//
generic($lasttime = stat($file)->mtime;);// // seconds since the epoch //
output(print( STDOUT  "\nlistening and autoparse for file =  $cmd_line  ...  \n" ););//
path( }else{);//
bend( });//
set();//usleep( 300 );
generic(select(undef, undef, undef, 0.25););//# Sleep for 250 milliseconds
lend(});//
output(print "done\n";);//
end();//

input(sub PrintTabs{ local ( $num ) = @_;);//
set(local( $i ) = 0;);//
loop(while(  $i  < $num ) {);//
output(print( "\t|" ););//
lend( $i=$i+1;});//
end(} );//
set(my @stack;);//

input(sub PrintStack{);//
process();//PrintTabs(10);
output();//print "\t----------------\n";
output(print "";);//
process(PrintTabs(10););//
output(print "-------- STACK:-------\n";);//
loop(foreach $val (@stack){);//
set($val =~ s/\t*//g;);//
set($val =~ s/^ +//g;);//
process(PrintTabs(10););//
output(print( "$val\n" ););//
lend(});//
process(PrintTabs(10););//
output(print "^----------------^\n";);//
end(} );//

input(sub Flow{ local ( $lastCode ) = @_;);//
set($LOOP = "^\t*(for|while|do)";);//
set($BRANCH = "^\t*(if|try)";);//
set($WITH = "^\t*(with)";);//
set($PEND = "^\t*(else|except)";);//
set($END = "^\t*(break|continue|return)";);//
set($OUTPUT = "^\t*(print)";);//
set($INPUTOBJ = "^\t*(class)";);//
set($INPUT = "^\t*(def|class)";);//
set($EVENT = "^(import|from)";);//
set($PATH = "^\t*(else|elif)";);//
event($Flow = (     $lastCode =~m/$INPUT/     ||   $lastCode =~m/$LOOP/     ||   $lastCode =~m/$BRANCH/    ||  $lastCode =~ m/$EVENT/ )  ;);//
end( return 1; });// return $Flow; }

input(sub getCode { local ( $code ) = @_;);//
set($code =~ s/^\t//g ;);//delete leading tabs
set($code =~ s/#.*$//;);//remove comment line
end( return $code ; });//

input(sub getComment { local ( $comment ) = @_;);//
branch(if ( $comment =~ m/^.*#{1}/  ));//
path( { );//
generic($comment =~ s/^.*#{1}//;);// 
path( }else{ );//
generic($comment ="" ;);// 
bend( } );//
end( return $comment; });// return "f" }

input(sub NumTabs{);//
set(local($match) = @_;);//
set();//$match =~ s/\*//g;
set($num = 0 ;);//
loop(while( $match =~ m/^\t/  ) {);//
generic($match =~ s/^\t//;);//
set($num = $num + 1 ;);//
lend(});//
end(return  $num  ;);//
end(} );//

input(sub getIndents { local ( $Line ) = @_;);//
set($count =  NumTabs( $Line  ) ;);//$count = m/\t//g + 1;
end( return $count; });//

input(sub getMultiline { local ($multiLine,  $Line ) = @_;);//
branch(if ( $multiLine==0 && ( $Line =~ m/^\t*\"\"\"/   ||    $Line =~ m/^\t*\'\'\'/ )  ));//
path( { );//
set($multiLine = 1;);//
output(print( "set(#);\/\/$_ CONVERTED MULTILINE COMMENTS TO SINGLES\n" ););//
end(return 1;);//
path(} else { );//
branch(if (    $multiLine==1 && ( $Line =~m/^\t*\"\"\"/   || $Line =~m/^\t*\'\'\'/)   ));//
path( { );//
set($multiLine = 0;);//
end(return 0;);//
bend( } );//
bend( } );//
end( return $multiLine ; });//

input(sub Parse{);//
output(open OUTFILE,  ">" ,   $outputVFC  or die "Cannot open output: $!";);//
set(  open( FILE, $cmd_line ););//
output(print( "...parseing $cmd_line\n" ););//
generic($lastCount = 0;);// ////
set(  $ParsedFile  = "";);//
set($multiLine = 0;);//
set($LINE = 0;);//
generic($PREV_LEVEL == 1;);// ////
generic($PREV_B4_ZERO == 1;);//  
generic($LEVEL == 1;);// ////
loop(  while(<FILE>) {);//
set($LINE = $LINE + 1 ;);//
branch(if ( $_ =~ m/^\n$/  ));//skip all blank lines
path( { );//
path( }else{ );//
process($multiLine = getMultiline( $multiLine,  $_ ) ;);//////
set($_ =~ s/    /\t/g ;);//
set($_ =~ s/\n// ;);//
branch(if ( $_ =~ m/^else:$/  ||   $_ =~ m/^\):$/   ));//if ( $_ =~ m/else:$/    )
path( { );//
set($_ =~ s/^\t/\t\t/ ;);//
bend( } );//
set();//
process($LEVEL = getIndents( $_  ) ;);//////
set($COMM = getComment( $_ ) ;);//
set($CODE = getCode( $_ ) ;);//
branch(if ( $multiLine==1  ));//if ( $_ =~ m/^\n/  || $multiLine==1  )
path( {);//
path(}else{ );//
branch(if ( 1 ));//if ( 0  )
path( { );//
generic($DIFF = $PREV_LEVEL -  $LEVEL ;);//  
branch(if ( $DIFF   > 1   && $LEVEL != 0 ));//
path( { );//
loop(while( $DIFF > 1 ) {);//
set($DIFF =  $DIFF -1 ;);//
output(print( $LINE ); PrintTabs( $LEVEL +$DIFF ); print( $LEVEL+$DIFF,"**\n" ););//
lend(});//
path( }else{ );//
output(print( $LINE ); PrintTabs( $LEVEL ); print( " $LEVEL\n" ););//
bend( } );//
path( }else{ );//
output(print( $LINE ); PrintTabs( $LEVEL ); print( " $LEVEL\n" ););//
branch(if ( $LEVEL == 0 && $PREV_LEVEL > 1 ));//SIGNIFIES WE ARE STILL WINTH A STRUCTURE
path( { );//
path( }else{ );//
output(print( $LINE ); PrintTabs( $LEVEL ); print( " $LEVEL\n" ););//
bend( } );//
branch(if ( $PREV_LEVEL == 0  && $PREV_B4_ZERO > 1 ));//
path( { );//
loop(while( $PREV_B4_ZERO > $LEVEL ) {);//
set($PREV_B4_ZERO = $PREV_B4_ZERO -1 ;);//
output(print( $LINE ); PrintTabs( $PREV_B4_ZERO ); print( "*$PREV_B4_ZERO\n" ););//
lend(});//
path( }else{ );//
bend( } );//
bend( } );//
bend( } );//
branch(if ( $LEVEL == 0  ));//
path( { );//
set($PREV_B4_ZERO = $PREV_LEVEL ;);//
path( }else{ );//
bend( } );//
set($PREV_LEVEL = $LEVEL;);//
bend( } );//
lend(  });//# End of SEARCHFILE
generic(  close ( FILE ););//
generic(  close ( OUTFILE ););//
end( });// 

input(sub printFooter{);//
set($rootfile = $file;);//
set($rootfile =~ s/^.*\\//;);//
generic(print( OUTFILE  ";INSECT" ););// ////
generic(print( OUTFILE  "A EMBEDDED SESSION INFORMATION\n" ););// ////
generic(print( OUTFILE  "; 255 16777215 65280 16777088 16711680 255 8388608 0 255 255 65535 65280 4210688 \n"););//
generic(print( OUTFILE  "$rootfile.py   #\"\"\"  #\"\"\"  \n"););//
generic(print( OUTFILE  "; notepad++.exe \n"););//
generic(print( OUTFILE  ";INSECT" ););// ////
generic(print( OUTFILE  "A EMBEDDED ALTSESSION INFORMATION\n"););//
generic(print( OUTFILE  "; 262 123 765 1694 0 170   379   4294966903    python.key  0"););//
end( });//



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 16777215 12632256 0 255 255 65535 65280 1381675
;    TabsPythonParser.pl   #   .
; notepad++
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 208 223 2150 1522 173 227   647   4294956706    perl.key  0