;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : TabsPythonParser.pl.vfc
;  File Date : 01:33:03 PM - 28:Apr:2023


input(#use);//////
set();//
generic(use File::stat qw(stat););//
end();//

input(sub LoadFileAsString {);//
output(local ( $file ) = @_;);//
output(local ( $keyfile ) ;);//
set(  open( FILE, $file ););//
loop(  while(<FILE>) {);//
set(s/^ *\n//;);//
set(tr/\t/ /;);//
set(  $keyfile = "$keyfile$_";);//
lend(  });//# End of SEARCHFILE
generic(  close ( FILE ););//
end($keyfile; });//

input(# main);// 
process($cmd_line = $ENV{'QUERY_STRING'} ;);//GetParams();
output();//print( "ARG = $cmd_line  \n" );
process(  ($cmd_line) = @ARGV;);//$cmd_line = $ENV{'QUERY_STRING'} ;
output();//print( "ARG = $cmd_line  \n" );
process($outputVFC =  "$cmd_line.vfc" ;);//$cmd_line = $ENV{'QUERY_STRING'} ;
set($file = $cmd_line ;);//
output(print( STDOUT  "parse file =  $cmd_line  ...  \n" ););//
generic($lasttime = 0;);//$lasttime = stat($file)->mtime;
set($I = 2;);//$I = 0;
process(Parse(););//
loop(while( $I < 1 ) {);//
set($I = $I+1;);//
generic($nowtime = stat($file)->mtime;);// // seconds since the epoch //
output();//print(  $nowtime - $lasttime );
output();//print( "  --- $file\n" );
branch(if ( $nowtime != $lasttime ));//
path( {);//
process(Parse(););//
generic($lasttime = stat($file)->mtime;);// // seconds since the epoch //
output(print( STDOUT  "\nlistening and autoparse for file =  $cmd_line  ...  \n" ););//
path( }else{);//
bend( });//
set();//usleep( 300 );
generic(select(undef, undef, undef, 0.25););//# Sleep for 250 milliseconds
lend(});//
output(print "done\n";);//
end();//

input(sub PrintTabs{ local ( $num ) = @_;);//
set(local( $i ) = 0;);//
loop(while(  $i  < $num ) {);//
output(print( "\t|" ););//
lend( $i=$i+1;});//
end(});//

input(sub PrintStack{  local( @stack ) = @_ ;);//
process();//PrintTabs(10);
output();//print "\t----------------\n";
output(print "";);//
process(PrintTabs(10););//
output(print "-------- STACK:-------\n";);//
loop(foreach $val (@stack){);//
set($val =~ s/\t*//g;);//
set($val =~ s/^ +//g;);//
process(PrintTabs(10););//
output(print( "$val\n" ););//
lend(});//
process(PrintTabs(10););//
output(print "^----------------^\n";);//
end(});//

input(sub Flow{ local ( $lastCode ) = @_;);//
event($Flow = (     $lastCode =~m/$INPUT/     ||   $lastCode =~m/$LOOP/     ||   $lastCode =~m/$BRANCH/    ||  $lastCode =~ m/$EVENT/ )  ;);//
end( return 1; });// return $Flow; }

input(sub getComment { local ( $comment ) = @_;);//
set($comment  =~ s/\n// ;);//
branch(if ( $comment =~ m/^.*#{1}/  ));//
path( {);//
generic($comment =~ s/^.*#{1}//;);// 
path( }else{);//
generic($comment ="" ;);// 
bend( });//
end( return $comment; });// return "f" }

input(sub getIndents { local ( $Line ) = @_;);//
set(local( $count )  = 0 ;);//
loop(while( $Line =~ m/    / ) {);//
set($count = $count + 1 ;);//
set($Line =~ s/    /T/ ;);//
output();//print( "-$Line" );
lend(});//
branch(if ( $Line =~ m/Telse:/  ||    $Line =~ m/Telif.*:/ ||    $Line =~ m/Texcept.*:/  ||  $Line =~ m/T\):/   ));//... black tab fix to keepo alignment of tabs at correct levels
path( {);//
set($count = $count + 1;);//
output();//print "<pre>";
bend( });//
end( return $count; });//

input(sub getCode { local ( $code ) = @_;);//
set($code  =~ s/\n// ;);//
set($code =~ s/    //g ;);//delete leading tabs
set($code =~ s/#.*$//;);//remove comment line
end( return $code ; });//

input(sub peek { local( @stack ) = @_ ;);//
process(local( $ret ) = pop( @stack ););//////
process(push( @stack , $ret  ););//////
branch(if ( $ret eq ""  ));//
path( { );//
set($ret = -1;);//
path( }else{ );//
bend( } );//
end(return $ret ;);//
end(} );//
set(@typestack;);//
set(@levelstack;);//

input(sub getType{ local( $CODE , $LEVEL    ) = @_;);//
set(my $BRANCH = "^(if|try|with).*[:\(]";);//
set(my $PATH = "^(else|elif|catch|except|final).*:";);//
set(my $LOOP = "^(for|while|do).*:";);//
set(my $INPUT = "^(def|class).*[:\(]";);//
set(my $EVENT = "^(from|import)";);//
set(my $OUTPUT = "^(print).*:";);//
set();//
process($level = peek( @levelstack ););//
branch(if ( $level == $LEVEL   ));//
path( { );//
output();//print( "$level == $LEVEL\t" );
process(pop( @levelstack ) ;);//  
output(print( pop( @typestack ) ) ;);//print( pop( @typestack ) , ">$LEVEL\n"  ) ;
path( }else{ );//
output();//print( "peeked = $level LEVEL = $LEVEL\n" );
bend( } );//
set();//
set(local( $TYPE ) = "...";);//
branch(if ( $CODE =~m/$INPUT/ ));//
path( {);//
branch(if ( $LEVEL < 1 ));//
path( { );//
set($TYPE = "input( $CODE  );\/\/\nbranch();\/\/\npath();\/\/\npath();\/\/ " ;);//$TYPE = "\ninput( $CODE  );\nbranch();\npath();\npath();\/\/ > --------------------------input $LEVEL \n" ;
path( }else{ );//
set($TYPE = "event( $CODE  );\/\/\nbranch();\/\/\npath();\/\/\npath();\/\/ " ;);///$TYPE = "\ninput( $CODE  );\nbranch();\npath();\npath();\/\/ > --------------------------input $LEVEL \n" ;//
bend( } );//
process(push( @typestack, "bend();\/\/\nend( );\/\/$CODE\n" ););//push( @typestack, "\nbend();\nend( );\/\/$CODE > -----------------------input close $LEVEL\n" );
event(push( @levelstack, $LEVEL ););//
path(} elsif ( $CODE =~ m/$BRANCH/ )  {);//
set($TYPE = "branch( $CODE );\/\/" ;);//$TYPE = "\nbranch( $CODE );\/\/ > $LEVEL \n" ;
process(push( @typestack, "bend( );\/\/$CODE\n" ););////push( @typestack, "\nbend( );\/\/$CODE > branch close $LEVEL\n" );//
event(push( @levelstack, $LEVEL ););//
path(} elsif ( $CODE =~ m/$LOOP/ )  {);//
set($TYPE = "loop( $CODE );\/\/" ;);//
process(push( @typestack, "lend( );\/\/$CODE\n" ););//////
event(push( @levelstack, $LEVEL ););//
path(} elsif ( $CODE =~ m/$EVENT/ )  {);//
set($TYPE = "event( $CODE );\/\/" ;);//
path(} elsif ( $CODE =~ m/$OUTPUT/ )  {);//
set($TYPE = "output( $CODE );\/\/" ;);//
path(} elsif ( $CODE =~ m/$PATH/ )  {);//
set($TYPE = "path( $CODE );\/\/" ;);//
path(} else { );//
set($TYPE = "set( $CODE );\/\/" ;);//
bend( });//
end( return $TYPE;  });//

input(sub Parse{);//
output(open OUTFILE,  ">" ,   $outputVFC  or die "Cannot open output: $!";);//
set(  open( FILE, $cmd_line ););//
output(print( "...parseing $cmd_line\n" ););//
generic($lastCount = 0;);// ////
set(  $ParsedFile  = "";);//
set($multiLine = 0;);//
set($LINE = 0;);//
generic($PREV_LEVEL = 0;);// ////
generic($PREV_LINE = 0;);//  
generic($LEVEL = 0;);//  
loop(  while(<FILE>) {);//
set();//$InLine = $_;
set($LINE = $LINE + 1 ;);//
branch(if (  $multiLine ==0 &&   (  $_ =~s/^ *\"\"\"//   || $_ =~s/^ *\'\'\'//   )   ));//
path( {);//
branch(if  ( $_ =~s/\"\"\"//   || $_ =~s/\'\'\'// ));//
path( { );//
set($_  =~ s/\n// ;);//
set($COMM =  $_ ;);//
set($_ = ""  ;);//
path( }else{ );//
set($multiLine = 1 ;);//
set($_ = "BEGIN MULTI LINE COMMENT\n";);//
bend( } );//
path(} else { );//
set($COMM = getComment( $_ ) ;);//
bend( });//
branch(if ( $_ =~ m/^\n$/  ||  $multiLine ));//skip all processing of all blank lines
path( {);//
branch(if ( $multiLine ));//
path( {);//
generic(  );//$LEVEL = 0;
branch(if (    ( $_ =~m/\"\"\"/   || $_ =~m/\'\'\'/)   ));//
path( {);//
set($multiLine = 0 ;);//
set($_ = "END MULTI LINE COMMENT\n";);//
bend( });//
output(print( "set( );\/\/$_" ););//
path(} else {);//
output();//print( $LINE,"\n" );
bend( });//
path( }else{);//
output();//print( $CODE,"\n" );
set();//
process($LEVEL = getIndents( $_  ) ;);//////
set($CODE = getCode( $_ ) ;);//
set($MISSED_LEVELS = $PREV_LEVEL - $LEVEL;);//
branch(if ( $MISSED_LEVELS  > 1 ));//
path( { );//
output();//print "\n----------------------- PROC MISSED LEVELS  \n";
generic($MISSED = 1;);// ////
loop(while( $MISSED_LEVELS >0 ) {);//
set($PROC_LEVEL = $PREV_LEVEL-$MISSED ;);//
output();//print "FROM $PREV_LEVEL TO $LEVEL ... PROC LEVEL $PROC_LEVEL   \n";
process();//PrintTabs( $LEVEL + $MISSED_LEVELS );
set($TYPE = getType( "BLANK" , $PROC_LEVEL  ) ;);//
output();//print "$TYPE $COMM ---> $LEVEL ||| $MISSED_LEVELS \n";
generic($MISSED = $MISSED + 1 ;);// ////
lend($MISSED_LEVELS = $MISSED_LEVELS  -1; });//
output();//print "DONE PROC MISSED LEVELS  \n";
path( }else{ );//
process();//PrintTabs( $LEVEL );
bend( } );//
set($TYPE = getType( $CODE , $LEVEL  ) ;);//
output(print "$TYPE $COMM\n";);//print "$TYPE $COMM ---> $LEVEL \n";
bend( });//
set($PREV_LEVEL = $LEVEL;);//
generic($PREV_LINE = $LINE;);//  
generic($PREV_CODE = $CODE;);//  
lend(  });//# End of SEARCHFILE
output();//PrintStack( @typestack  ) ;
set($stack = pop( @typestack ););//
loop(while( $stack ) {);//clean up stack ...
output(print "$stack";);//print "$TYPE $COMM ---> $LEVEL \n";
set($stack = pop( @typestack ););//
lend(});//
generic(  close ( FILE ););//
generic(  close ( OUTFILE ););//
output(print( "\n$LINE processed lines\n" ););//
end( });// 

input(sub printFooter{);//
set($rootfile = $file;);//
set($rootfile =~ s/^.*\\//;);//
generic(print( OUTFILE  ";INSECT" ););// ////
generic(print( OUTFILE  "A EMBEDDED SESSION INFORMATION\n" ););// ////
generic(print( OUTFILE  "; 255 16777215 65280 16777088 16711680 255 8388608 0 255 255 65535 65280 4210688 \n"););//
generic(print( OUTFILE  "$rootfile.py   #\"\"\"  #\"\"\"  \n"););//
generic(print( OUTFILE  "; notepad++.exe \n"););//
generic(print( OUTFILE  ";INSECT" ););// ////
generic(print( OUTFILE  "A EMBEDDED ALTSESSION INFORMATION\n"););//
generic(print( OUTFILE  "; 262 123 765 1694 0 170   379   4294966903    python.key  0"););//
end( });//



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 16777215 12632256 0 255 255 65535 65280 1381675
;    TabsPythonParser.pl   #   .
; notepad++
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 485 239 2182 1276 173 165   839   4294962515    perl.key  0