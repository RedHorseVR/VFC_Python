;;;parse file =  C:\Users\luisr\OneDrive\Desktop\VFC_WORK\VFC_Python\black_pyparser\dgraph.py  ...  
;;;...parseing C:\Users\luisr\OneDrive\Desktop\VFC_WORK\VFC_Python\black_pyparser\dgraph.py
event( import pygame );// 
event( import math );// 
event( import random );// 
set( pygame.init() );// 
set( WIDTH, HEIGHT = 1000, 800 );// 
set( screen = pygame.display.set_mode((WIDTH, HEIGHT)) );// 
set( pygame.display.set_caption("Dynamic Graph Network") );// 
set( BLACK = (0, 0, 0) );// 
set( WHITE = (255, 255, 255) );// 
set( RED = (255, 100, 0) );// 
set( YELLOW = (255, 255, 0) );// 
set( NUM_NODES = 20 );// 
set( NODE_RADIUS = 25 );// 
set( CONNECTION_PROBABILITY = 0.30 );// 
set( IDEAL_DISTANCE = NODE_RADIUS * NUM_NODES );// 
set( MIN_VELOCITY = 0.1 );// 
set( font = pygame.font.Font(None, 24) );// 
end();//;
input( class Node:  );//
branch();//
path();//
path();//  
end();//
event( def __init__(self, x, y, label):  );//
branch();//
path();//
path();//  
set( self.x = x );// 
set( self.y = y );// 
set( self.vx = 0 );// 
set( self.vy = 0 );// 
set( self.label = label );// 
bend();
end( );//def __init__(self, x, y, label): > ----------------------- 1
end();//
event( def update(self):  );//
branch();//
path();//
path();//  
branch( if abs(self.vx) < MIN_VELOCITY: );// 
set( self.vx = 0 );// 
bend( );//if abs(self.vx) < MIN_VELOCITY:
branch( if abs(self.vy) < MIN_VELOCITY: );// 
set( self.vy = 0 );// 
bend( );//if abs(self.vy) < MIN_VELOCITY:
set( self.x += self.vx );// 
set( self.y += self.vy );// 
set( self.vx *= 0.9 );// 
set( self.vy *= 0.9 );// 
set( self.x = max(NODE_RADIUS, min(WIDTH - NODE_RADIUS, self.x)) );// 
set( self.y = max(NODE_RADIUS, min(HEIGHT - NODE_RADIUS, self.y)) );// 
bend();
end( );//def update(self): > ----------------------- 1
end();//
event( def draw(self, screen):  );//
branch();//
path();//
path();//  
set( pygame.draw.circle(screen, RED, (int(self.x), int(self.y)), NODE_RADIUS) );// 
set( label_surface = font.render(self.label, True, WHITE) );// 
set( label_rect = label_surface.get_rect(center=(int(self.x), int(self.y))) );// 
set( screen.blit(label_surface, label_rect) );// 
bend();
end( );//def draw(self, screen): > ----------------------- 1
bend();//
end( );//class Node:
end();//
input( def draw_arrow(screen, start, end, color, size=10):  );
branch();
path();
path();// > --------------------------input 0 
 
set( pygame.draw.line(screen, color, start, end, 2) );// 
set( angle = math.atan2(start[1] - end[1], start[0] - end[0]) );// 
set( end_x = end[0] + size * math.cos(angle) );// 
set( end_y = end[1] + size * math.sin(angle) );// 
set( pygame.draw.line( );// 
set( screen, );// 
set( color, );// 
set( end, );// 
set( ( );// 
set( end_x + size * math.cos(angle + math.pi / 6), );// 
set( end_y + size * math.sin(angle + math.pi / 6), );// 
set( ), );// 
set( 2, );// 
set( ) );// 
set( pygame.draw.line( );// 
set( screen, );// 
set( color, );// 
set( end, );// 
set( ( );// 
set( end_x + size * math.cos(angle - math.pi / 6), );// 
set( end_y + size * math.sin(angle - math.pi / 6), );// 
set( ), );// 
set( 2, );// 
set( ) );// 
bend();
end( );//def draw_arrow(screen, start, end, color, size=10): > ----------------------- 0
end();//
input( def generate_graph():  );
branch();
path();
path();// > --------------------------input 0 
 
set( global nodes, connections );// 
set( nodes = [ );// 
set( Node( );// 
set( random.randint(NODE_RADIUS, WIDTH - NODE_RADIUS), );// 
set( random.randint(NODE_RADIUS, HEIGHT - NODE_RADIUS), );// 
set( chr(65 + i), );// 
set( ) );// 
set( for i in range(NUM_NODES) );// 
set( ] );// 
set( connections = [] );// 
loop( for i in range(NUM_NODES): );// 
loop( for j in range(i + 1, NUM_NODES): );// 
branch( if random.random() < CONNECTION_PROBABILITY: );// 
set( connections.append((i, j)) );// 
set( connections.append((j, i)) );// 
bend( );//if random.random() < CONNECTION_PROBABILITY:
lend( );//for j in range(i + 1, NUM_NODES):
lend( );//for i in range(NUM_NODES):
bend();
end( );//def generate_graph(): > ----------------------- 0
end();//
input( def save_cyphers():  );
branch();
path();
path();// > --------------------------input 0 
 
branch( with open("cyphers.txt", "w") as f: );// 
set( edge_labels = [] );// 
loop( for i, node in enumerate(nodes): );// 
loop( for conn in connections: );// 
branch( if conn[0] == i: );// 
set( start_node = nodes[conn[0]] );// 
set( end_node = nodes[conn[1]] );// 
set( edge_labels.append(f"{start_node.label}2{end_node.label}") );// 
set( f.write(f"{start_node.label} -> {end_node.label}\n") );// 
bend( );//if conn[0] == i:
lend( );//for conn in connections:
lend( );//for i, node in enumerate(nodes):
bend( );//with open("cyphers.txt", "w") as f:
bend();
end( );//def save_cyphers(): > ----------------------- 0
end();//
input( def main():  );
branch();
path();
path();// > --------------------------input 0 
 
set( global dragging, drag_node );// 
set( running = True );// 
set( dragging = False );// 
set( drag_node = None );// 
set( clock = pygame.time.Clock() );// 
set( generate_graph() );// 
loop( while running: );// 
loop( for event in pygame.event.get(): );// 
branch( if event.type == pygame.QUIT: );// 
set( running = False );// 
path( elif event.type == pygame.MOUSEBUTTONDOWN: );// 
branch( if event.button == 1: );// 
set( mouse_x, mouse_y = pygame.mouse.get_pos() );// 
loop( for node in nodes: );// 
branch( if math.hypot(node.x - mouse_x, node.y - mouse_y) < NODE_RADIUS: );// 
set( dragging = True );// 
set( drag_node = node );// 
set( break );// 
bend( );//if math.hypot(node.x - mouse_x, node.y - mouse_y) < NODE_RADIUS:
lend( );//for node in nodes:
branch( if 10 <= mouse_x <= 140 and 10 <= mouse_y <= 50: );// 
set( generate_graph() );// 
path( elif 170 <= mouse_x <= 300 and 10 <= mouse_y <= 50: );// 
set( save_cyphers() );// 
bend( );//if 10 <= mouse_x <= 140 and 10 <= mouse_y <= 50:
bend( );//if event.button == 1:
path( elif event.type == pygame.MOUSEBUTTONUP: );// 
branch( if event.button == 1: );// 
set( dragging = False );// 
set( drag_node = None );// 
bend( );//if event.button == 1:
path( elif event.type == pygame.KEYDOWN: );// 
branch( if event.key == pygame.K_r: );// 
set( generate_graph() );// 
path( elif event.key == pygame.K_s: );// 
set( save_cyphers() );// 
bend( );//if event.key == pygame.K_r:
bend( );//if event.type == pygame.QUIT:
lend( );//for event in pygame.event.get():
branch( if dragging and drag_node: );// 
set( mouse_x, mouse_y = pygame.mouse.get_pos() );// 
set( drag_node.x = mouse_x );// 
set( drag_node.y = mouse_y );// 
set( drag_node.vx = 0 );// 
set( drag_node.vy = 0 );// 
bend( );//if dragging and drag_node:
loop( for i, node in enumerate(nodes): );// 
set( dx = WIDTH / 2 - node.x );// 
set( dy = HEIGHT / 2 - node.y );// 
set( distance = math.hypot(dx, dy) );// 
set( node.vx += dx / distance * 0.1 );// 
set( node.vy += dy / distance * 0.1 );// 
loop( for other in nodes[i + 1 :]: );// 
set( dx = other.x - node.x );// 
set( dy = other.y - node.y );// 
set( distance = math.hypot(dx, dy) );// 
branch( if distance < IDEAL_DISTANCE: );// 
set( force = (1 - distance / IDEAL_DISTANCE) ** 2 * 0.5 );// 
set( node.vx -= dx / distance * force );// 
set( node.vy -= dy / distance * force );// 
set( other.vx += dx / distance * force );// 
set( other.vy += dy / distance * force );// 
bend( );//if distance < IDEAL_DISTANCE:
lend( );//for other in nodes[i + 1 :]:
lend( );//for i, node in enumerate(nodes):
loop( for conn in connections: );// 
set( node1, node2 = nodes[conn[0]], nodes[conn[1]] );// 
set( dx = node2.x - node1.x );// 
set( dy = node2.y - node1.y );// 
set( distance = math.hypot(dx, dy) );// 
set( force = (distance - IDEAL_DISTANCE / 2) * 0.001 );// 
set( node1.vx += dx / distance * force );// 
set( node1.vy += dy / distance * force );// 
set( node2.vx -= dx / distance * force );// 
set( node2.vy -= dy / distance * force );// 
lend( );//for conn in connections:
loop( for node in nodes: );// 
set( node.update() );// 
lend( );//for node in nodes:
set( screen.fill(BLACK) );// 
set( pygame.draw.rect(screen, WHITE, (10, 10, 150, 40)) );// 
set( pygame.draw.rect(screen, WHITE, (170, 10, 160, 40)) );// 
set( regenerate_text = font.render("  Regenerate - 'R'  ", True, BLACK) );// 
set( save_cyphers_text = font.render("  Save Cyphers - 'S'  ", True, BLACK) );// 
set( screen.blit(regenerate_text, (10, 20)) );// 
set( screen.blit(save_cyphers_text, (170, 20)) );// 
set( edge_labels = {} );// 
loop( for conn in connections: );// 
set( start_node, end_node = nodes[conn[0]], nodes[conn[1]] );// 
set( start = (int(start_node.x), int(start_node.y)) );// 
set( end = (int(end_node.x), int(end_node.y)) );// 
set( dx, dy = end[0] - start[0], end[1] - start[1] );// 
set( length = math.hypot(dx, dy) );// 
branch( if length == 0: );// 
set( continue );// 
bend( );//if length == 0:
set( dx, dy = dx / length, dy / length );// 
set( start = (int(start[0] + dx * NODE_RADIUS), int(start[1] + dy * NODE_RADIUS)) );// 
set( end = (int(end[0] - dx * NODE_RADIUS), int(end[1] - dy * NODE_RADIUS)) );// 
set( draw_arrow(screen, start, end, WHITE) );// 
set( mid_x = (start[0] + end[0]) // 2 );// 
set( mid_y = (start[1] + end[1]) // 2 );// 
set( edge_key = tuple(sorted([start_node.label, end_node.label])) );// 
branch( if edge_key not in edge_labels: );// 
set( edge_labels[edge_key] = set() );// 
bend( );//if edge_key not in edge_labels:
set( edge_labels[edge_key].add(f"{start_node.label}2{end_node.label}") );// 
lend( );//for conn in connections:
loop( for edge_key, labels in edge_labels.items(): );// 
set( label_text = ",".join(sorted(labels)) );// 
set( label_surface = font.render(label_text, True, YELLOW) );// 
set( mid_x = sum(nodes[ord(node) - 65].x for node in edge_key) / 2 );// 
set( mid_y = sum(nodes[ord(node) - 65].y for node in edge_key) / 2 );// 
set( label_rect = label_surface.get_rect(center=(mid_x, mid_y)) );// 
set( screen.blit(label_surface, label_rect) );// 
lend( );//for edge_key, labels in edge_labels.items():
loop( for node in nodes: );// 
set( node.draw(screen) );// 
lend( );//for node in nodes:
set( pygame.display.flip() );// 
set( clock.tick(60) );// 
lend( );//while running:
set( pygame.quit() );// 
bend();
end( );//def main(): > ----------------------- 0
branch( if __name__ == "__main__": );// 
set( main() );// 
bend( );//if __name__ == "__main__":
set(  );//   Export  Date: 05:21:53 PM - 08:Aug:2024.
;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 255 8388608 0 255 255 65535 65280 4210688 
dgraph.py.py   #"""  #"""  
; notepad++.exe 
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 262 123 765 1694 0 170   379   4294966903    python.key  0done
